const std = @import("std");
const c = @import("c.zig");

pub fn checkClError(err: c.cl_int) !void {
    return switch (err) {
        c.CL_SUCCESS => return,
        c.CL_OUT_OF_HOST_MEMORY => return error.OutOfMemory,
        c.CL_DEVICE_NOT_FOUND => return error.DeviceNotFound,
        c.CL_DEVICE_NOT_AVAILABLE => return error.DeviceNotAvailable,
        c.CL_COMPILER_NOT_AVAILABLE => return error.CompilerNotAvailable,
        c.CL_MEM_OBJECT_ALLOCATION_FAILURE => return error.MemObjectAllocationFailure,
        c.CL_OUT_OF_RESOURCES => return error.OutOfResources,
        c.CL_PROFILING_INFO_NOT_AVAILABLE => return error.ProfilingInfoNotAvailable,
        c.CL_MEM_COPY_OVERLAP => return error.MemCopyOverlap,
        c.CL_IMAGE_FORMAT_MISMATCH => return error.ImageFormatMismatch,
        c.CL_IMAGE_FORMAT_NOT_SUPPORTED => return error.ImageFormatNotSupported,
        c.CL_BUILD_PROGRAM_FAILURE => return error.BuildProgramFailure,
        c.CL_MAP_FAILURE => return error.MapFailure,
        c.CL_MISALIGNED_SUB_BUFFER_OFFSET => return error.MisalignedSubBufferOffset,
        c.CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST => return error.ExecStatusErrorForEventsInWaitList,
        c.CL_COMPILE_PROGRAM_FAILURE => return error.CompileProgramFailure,
        c.CL_LINKER_NOT_AVAILABLE => return error.LinkerNotAvailable,
        c.CL_LINK_PROGRAM_FAILURE => return error.LinkProgramFailure,
        c.CL_DEVICE_PARTITION_FAILED => return error.DevicePartitionFailed,
        c.CL_KERNEL_ARG_INFO_NOT_AVAILABLE => return error.KernelArgInfoNotAvailable,
        c.CL_INVALID_VALUE => return error.InvalidValue,
        c.CL_INVALID_DEVICE_TYPE => return error.InvalidDeviceType,
        c.CL_INVALID_PLATFORM => return error.InvalidPlatform,
        c.CL_INVALID_DEVICE => return error.InvalidDevice,
        c.CL_INVALID_CONTEXT => return error.InvalidContext,
        c.CL_INVALID_QUEUE_PROPERTIES => return error.InvalidQueueProperties,
        c.CL_INVALID_COMMAND_QUEUE => return error.InvalidCommandQueue,
        c.CL_INVALID_HOST_PTR => return error.InvalidHostPtr,
        c.CL_INVALID_MEM_OBJECT => return error.InvalidMemObject,
        c.CL_INVALID_IMAGE_FORMAT_DESCRIPTOR => return error.InvalidImageFormatDescriptor,
        c.CL_INVALID_IMAGE_SIZE => return error.InvalidImageSize,
        c.CL_INVALID_SAMPLER => return error.InvalidSampler,
        c.CL_INVALID_BINARY => return error.InvalidBinary,
        c.CL_INVALID_BUILD_OPTIONS => return error.InvalidBuildOptions,
        c.CL_INVALID_PROGRAM => return error.InvalidProgram,
        c.CL_INVALID_PROGRAM_EXECUTABLE => return error.InvalidProgramExecutable,
        c.CL_INVALID_KERNEL_NAME => return error.InvalidKernelName,
        c.CL_INVALID_KERNEL_DEFINITION => return error.InvalidKernelDefinition,
        c.CL_INVALID_KERNEL => return error.InvalidKernel,
        c.CL_INVALID_ARG_INDEX => return error.InvalidArgIndex,
        c.CL_INVALID_ARG_VALUE => return error.InvalidArgValue,
        c.CL_INVALID_ARG_SIZE => return error.InvalidArgSize,
        c.CL_INVALID_KERNEL_ARGS => return error.InvalidKernelArgs,
        c.CL_INVALID_WORK_DIMENSION => return error.InvalidWorkDimension,
        c.CL_INVALID_WORK_GROUP_SIZE => return error.InvalidWorkGroupSize,
        c.CL_INVALID_WORK_ITEM_SIZE => return error.InvalidWorkItemSize,
        c.CL_INVALID_GLOBAL_OFFSET => return error.InvalidGlobalOffset,
        c.CL_INVALID_EVENT_WAIT_LIST => return error.InvalidEventWaitList,
        c.CL_INVALID_EVENT => return error.InvalidEvent,
        c.CL_INVALID_OPERATION => return error.InvalidOperation,
        c.CL_INVALID_GL_OBJECT => return error.InvalidGlObject,
        c.CL_INVALID_BUFFER_SIZE => return error.InvalidBufferSize,
        c.CL_INVALID_MIP_LEVEL => return error.InvalidMipLevel,
        c.CL_INVALID_GLOBAL_WORK_SIZE => return error.InvalidGlobalWorkSize,
        c.CL_INVALID_PROPERTY => return error.InvalidProperty,
        c.CL_INVALID_IMAGE_DESCRIPTOR => return error.InvalidImageDescriptor,
        c.CL_INVALID_COMPILER_OPTIONS => return error.InvalidCompilerOptions,
        c.CL_INVALID_LINKER_OPTIONS => return error.InvalidLinkerOptions,
        c.CL_INVALID_DEVICE_PARTITION_COUNT => return error.InvalidDevicePartitionCount,
        else => std.debug.panic("Unknown Error Code: {}", .{err}),
    };
}
